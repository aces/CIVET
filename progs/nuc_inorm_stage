#!/usr/bin/env perl

# Using N3, these stages will run an initial correction of intensity
# non-uniformity on the native or linearly registered images. 
#
# Here is how nu_correct works:
#   - a brain mask should always be given to nu_correct, as nu_correct
#     needs one
#   - if no brain mask is given, nu_correct will build one (-auto_mask)
#     * the image is in Talairach space, in this case use avg305 mask
#     * the image is not in Talairach space, in this case use biModalT
#       to get some kind of mask, but this mask usually includes some
#       of the skull and neck tissues (and does not produce great results)
# Procedure to follow:
#   - doing some iterations of nu_correct on a native image (without a
#     mask) is better than nothing and is generally necessary in order 
#     to extract a reliable brain mask
#   - using the avg305 mask in Talairach space is sufficient to remove
#     non-uniformities (start from non-corrected native image) and to
#     extract the final brain mask (in fact, using the avg305 mask may
#     be advantageous when mincbet fails to remove all the skull, eyes,
#     neck)
# 
# Be careful: the input file might come as .mnc.gz.
#
# In the arguments, $nuc_dist is the distance between knots in the b-spline.
# The accuracy of nu_correct is quite sensitive to this distance. A small
# value is more accurate, but it must not be chosen too small so as not to
# remove biological variations. The smaller d is, the longer the code will
# take to run. Accuracy is not free. In the old version, d=200 was used and 
# this created hot spots in the corrected images when the spline was not able 
# to represent non-uniformities at a smaller wavelength. (This likely depends
# on the scanner too.) In the new way, d=25 to 50 seems to give reliable
# results. 
#

use strict;
use warnings "all";
use File::Basename;
use File::Temp qw/ tempdir /;

# Directory for temporary files.
my $me = &basename($0);
my $tmpdir = &tempdir( "$me-XXXXXX", TMPDIR => 1, CLEANUP => 1 );

my $input = $ARGV[0];
my $output = $ARGV[1];
my $mask = $ARGV[2];
my $nuc_dist = $ARGV[3];
my $nuc_cycles = $ARGV[4];
my $nuc_iters = $ARGV[5];

# apply non-uniformity correction and intensity normalization on image.

if ( -e $input ) {

  my $tmp = "${tmpdir}/nuc.mnc";

  my $tmp_input = $input;

  # Use a mask if one is given. Resample the mask to be like the input.
  # This can happen if a model's mask is used which does not match the
  # template used to resample the input.

  my @mask_opts = ();
  if( $mask ne "none" and ( -e $mask ) ) {
    my $mask_tmp = "${tmpdir}/nuc_mask.mnc";
    &run( "mincresample", "-like", $input, "-nearest_neighbour",
          $mask, $mask_tmp );
    push @mask_opts, ( "-mask", $mask_tmp );
  }

  # Important note: Because of the way nu_correct converges, it is better to
  # do a few sets of 100 iterations rather than a total number of iterations
  # at once. For example, nu_correct often thinks it has converged after 50-60
  # iterations, so repeating the cycle will provide more iterations. Please
  # leave as it is until nu_correct is fixed.

  for( my $i = 0; $i < $nuc_cycles; $i++ ) {
    &run( "nu_correct", "-clobber", "-iter", $nuc_iters, "-stop", 0.0001,
          "-fwhm", 0.1, "-distance", $nuc_dist, @mask_opts,
          $tmp_input, $output );
    &run( "mv", "-f", $output, $tmp );
    $tmp_input = $tmp;
  }

  # We remove the .imp file as it is relative to the previous
  # cycle, thus meaningless globally.

  my $imp_file = $output;
  $imp_file =~ s/\.[^\.]*$/\.imp/;
  &run( "rm", "-f", $imp_file );

  # remove high extremum (low extremum - background - will be taken care of by the mask).
  my $top;
  my $upper = 99.50;
  chomp($top = `mincstats -quiet -pctT $upper $tmp`);

  my $clip_expr = "if(A[0]<0){out=0;}else{if(A[0]>${top}){out=${top};}else{out=A[0];}}";

  &run( "minccalc", "-clobber", "-expression", $clip_expr, $tmp, $output );

}


#Execute a system call.

sub run {
  print "@_\n";
  system(@_)==0 or die "Command @_ failed with status: $?";
}


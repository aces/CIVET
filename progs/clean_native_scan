#!/usr/bin/env perl

# Run checks on the native t1, t2, pd, mask images:
# - make spacing regular
# - make direction cosines regular
# - resample in positive direction
#
# It is assumed that any user-supplied mask will be in the same
# space as the native t1. t2 and pd will be registered to t1 and
# the mask later.
#
#
# Copyright Alan C. Evans
# Professor of Neurology
# McGill University
#

use strict;
use warnings "all";
use File::Basename;
use File::Temp qw/ tempdir /;

my $CENTER_IMAGE = 0;

# Directory for temporary files.
my $me = &basename($0);
my $tmpdir = &tempdir( "$me-XXXXXX", TMPDIR => 1, CLEANUP => 1 );

my $input_t1 = $ARGV[0];
my $input_t2 = $ARGV[1];
my $input_pd = $ARGV[2];
my $input_mp2 = $ARGV[3];
my $input_mask = $ARGV[4];
my $output_t1 = $ARGV[5];
my $output_t2 = $ARGV[6];
my $output_pd = $ARGV[7];
my $output_mask = $ARGV[8];
my $stx_model = $ARGV[9];

# Regularize t1, t2, pd, mp2, mask.

if( ( $input_t1 ne "none" ) and ( -e $input_t1 ) ) {

  if( ( $input_mp2 ne "none" ) and ( -e $input_mp2 ) ) {
    &mask_mp2_bg( $input_t1, $input_mp2, $output_t1, $stx_model );
    $input_t1 = $output_t1;
  }
  &make_regular( $input_t1, $output_t1 );
}

if( ( $input_t2 ne "none" ) and ( -e $input_t2 ) ) {
  &make_regular( $input_t2, $output_t2 );
}

if( ( $input_pd ne "none" ) and ( -e $input_pd ) ) {
  &make_regular( $input_pd, $output_pd );
}

if( ( $input_mask ne "none" ) and ( -e $input_mask ) ) {
  &make_regular( $input_mask, $output_mask );

  # Make sure any user-supplied mask is like the t1 image 

  &run( 'mincresample', '-quiet', '-clobber', '-like', $output_t1,
        '-nearest', $output_mask, "${tmpdir}/output_mask_tmp.mnc" );
  &run( 'mv', '-f', "${tmpdir}/output_mask_tmp.mnc", $output_mask );
}


# Make the minc image regular.

sub make_regular {

  my $input = shift;
  my $output = shift;

  # make sure the file is 3-D
  my $ret = `mincinfo -dimnames $input`;
  if( $ret =~ m/time/ ) {
    die "Image $input contains time dimension.\n";
  }
  if( !( ( $ret =~ m/xspace/ ) && ( $ret =~ m/yspace/ ) && 
         ( $ret =~ m/zspace/ ) ) ) {
    die "Image $input does not contain all 3 (x,y,z) space dimensions.\n";
  }

  # bypass symbolic link, if any, or .mnc.gz, and convert to minc2
  # in the process.
  &run( 'minccalc', '-clobber', '-quiet', '-expr', 'A[0]', $input, 
        $output );

  &run( 'minc_modify_header', '-sinsert', 'xspace:spacing=regular__',
        '-sinsert', 'yspace:spacing=regular__', '-sinsert',
        'zspace:spacing=regular__', $output );
}

# Mask the background of the mp2rage image using its associated t1 image.
# It is assumed that the mp2rage and t1 images have been acquired 
# simultaneously, thus co-registered. 

sub mask_mp2_bg {

  my $t1 = shift;
  my $mp2 = shift;
  my $output = shift;
  my $model = shift;

  # Obtain a head mask by quick registration to the stx model.

  my $tmp_mask = "${tmpdir}/t1_mask_tmp.mnc";
  &run( 'bestlinreg.pl', '-clobber', '-lsq12', '-nmi', $t1,
        "${model}.mnc", "${tmpdir}/mp2_lin.xfm" );
  &run( 'mincresample', '-clobber', '-quiet', '-like', $mp2,
        '-nearest', '-transform', "${tmpdir}/mp2_lin.xfm", '-invert',
        "${model}\_headmask.mnc", $tmp_mask );
  unlink( "${tmpdir}/mp2_lin.xfm" );
  &run( 'mincdefrag', $tmp_mask, $tmp_mask, 1, 6 );
  &run( 'dilate_volume', $tmp_mask, $tmp_mask, 1, 6, 1 );

  # Mask out the background outside the headmask.

  &run( 'minccalc', '-quiet', '-clobber', '-expression',
        "if(A[1]<0.5){A[0]/10.0}else{A[0]}", $mp2, $tmp_mask, $output );
  unlink( $tmp_mask );
}


# Execute a system call.

sub run {
  print "@_\n";
  system(@_)==0 or die "Command @_ failed with status: $?";
}


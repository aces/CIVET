#! /usr/bin/env perl
#
# Surface Feature Extractor
#
# Authors:
#   Oliver Lyttelton oliver@bic.mni.mcgill.ca
#
# Copyright Alan C. Evans
# Professor of Neurology
# McGill University
#

use strict;
use warnings "all";
use Getopt::Tabular;
use File::Basename;
use File::Temp qw/ tempdir /;
use POSIX;
use MNI::MiscUtilities qw(shellquote);

# inputs:
my $t1_final = shift;
my $cls_correct = shift;
my $pve_wm = shift;
my $pve_csf = shift;
my $pve_disc = shift;
my $brain_mask = shift;
my $final_callosum = shift;
my $subcortical_mask = shift;
my $blood_vessels = shift;
my $maskhippocampus = shift;
my $final_classify = shift;
my $skel_csf = shift;

# make tmpdir:
my $me = &basename($0);
my $tmpdir = &tempdir( "$me-XXXXXXXX", TMPDIR => 1, CLEANUP => 1 );

# temporary outputs:
my $classified_wm_fixed = "${tmpdir}/classified_wm_fixed.mnc";
my $classified_wm_gm_fixed = "${tmpdir}/classified_wm_gm_fixed.mnc";

# modify custom_mask to mask sub-cortical gray and fill up ventricles
# if we don't want to mask the hippocampus (label=4) and the amygdala
# (label=5). Masking the hippocampus/amygdala means that these
# regions will be set as WM and the cortical surfaces will ignore
# them (if these regions are identified in the original subcortical
# mask provided by the stereotaxic model). Not masking is like the
# old behaviour of CIVET-1.1.12 and earlier.

my $custom_mask = "${tmpdir}/custom_mask.mnc";
if( !$maskhippocampus ) {
  run( "minccalc", "-clobber", "-quiet", "-expression",
       "if(abs(A[0]-4)<0.5||abs(A[0]-5)<0.5){0}else{A[0]}",
       $subcortical_mask, $custom_mask );
} else {
  run( "cp", "-f", $subcortical_mask, $custom_mask );
}

plug_ventricles( $pve_csf, $custom_mask );

# copy contiguous pieces of white matter from pve image and custom mask

fix_wm( $cls_correct, $pve_wm, $custom_mask, $brain_mask, $classified_wm_fixed );

# fix gray matter voxels

if( 0 ) {
  fix_gm( $classified_wm_fixed, $classified_wm_gm_fixed );
  unlink( $classified_wm_fixed );
} else {
  run( "mv", "-f", $classified_wm_fixed, $classified_wm_gm_fixed );  ## ignore fix_gm
}

# create a midline mask to separate the hemispheres

create_midline_mask( $classified_wm_gm_fixed, $custom_mask, 
                     $brain_mask, $final_callosum );
unlink( $custom_mask );

# final classification with split hemispheres

run( "minccalc", "-clobber", "-quiet", "-expr", 
     "if(A[1]>0.5){out=A[1];}else{out=A[0];}",
     $classified_wm_gm_fixed, $final_callosum, $final_classify );
unlink( $classified_wm_gm_fixed );

# change WM voxels in contact with CSF/BG to GM. These
# are mostly voxels below the brainstem. For that matter, 
# the dilation is only in the y-z plane, because we want
# to ignore CSF voxels in ventricles that could touch the
# white mid-plane x=+/-2.

run( "minccalc", "-quiet", "-clobber", "-byte", "-unsigned",
     "-expression", "if(abs(A[0])<0.5||abs(A[0]-1)<0.5){1}else{0}",
     $final_classify, "${tmpdir}/csf_bg_mask.mnc" );

open DIL, "> ${tmpdir}/dilate.kernel";
print DIL "MNI Morphology Kernel File\n";
print DIL "Kernel_Type = Normal_Kernel;\n";
print DIL "Kernel =\n";
print DIL "0.0  1.0  0.0  0.0  0.0  1.0\n";   # kernel is 2-D in (y,z)
print DIL "0.0 -1.0  0.0  0.0  0.0  1.0\n";
print DIL "0.0  0.0  1.0  0.0  0.0  1.0\n";
print DIL "0.0  0.0 -1.0  0.0  0.0  1.0\n";
print DIL "0.0  1.0  1.0  0.0  0.0  1.0\n";
print DIL "0.0 -1.0  1.0  0.0  0.0  1.0\n";
print DIL "0.0 -1.0 -1.0  0.0  0.0  1.0\n";
print DIL "0.0  1.0 -1.0  0.0  0.0  1.0;\n";
close DIL;

run( 'mincmorph', '-clobber', '-unsigned', '-byte', '-successive', 'D',
     '-kernel', "${tmpdir}/dilate.kernel", "${tmpdir}/csf_bg_mask.mnc",
     "${tmpdir}/csf_bg_mask_dil.mnc" );
run( 'mv', '-f', "${tmpdir}/csf_bg_mask_dil.mnc", 
     "${tmpdir}/csf_bg_mask.mnc" );
unlink( "${tmpdir}/dilate.kernel" );

run( "minccalc", "-quiet", "-clobber",
     "-expression", "if(abs(A[0]-3)<0.5&&abs(A[1]-1)<0.5){2}else{A[0]}",
     $final_classify, "${tmpdir}/csf_bg_mask.mnc", "${tmpdir}/new_cls.mnc" );
unlink( "${tmpdir}/csf_bg_mask.mnc" );
run( "mv", "-f", "${tmpdir}/new_cls.mnc", $final_classify );

# create the csf skeleton

make_csf_skel( $final_classify, $pve_csf, $skel_csf, $tmpdir );

if( $blood_vessels ne "none" ) {
  my $tmp_cls = "${tmpdir}/tmp_cls.mnc";
  remove_blood_vessels( $t1_final, $brain_mask, $cls_correct, $pve_disc,
                        $blood_vessels );
  run( 'minccalc', '-quiet', '-clobber', '-expression', 
       "if(A[1]>0.5&&abs(A[0]-3)<0.5){1}else{A[0]}",
       $final_classify, $blood_vessels, $tmp_cls );
  run( 'mv', '-f', $tmp_cls, $final_classify );
}

# the end!


# create the csf skeleton

sub make_csf_skel {

  my $cls_correct = shift;
  my $pve_csf = shift;
  my $skel_csf = shift;
  my $tmpdir = shift;

  my $wm_gm_mask = "${tmpdir}/wm_gm_mask.mnc";
  my $wm_gm_maskD = "${tmpdir}/wm_gm_mask_dil.mnc";
  my $pve_csf_dil = "${tmpdir}/pve_csf_dil.mnc";

  # Make sure there is a layer of CSF around the cortex:
  #   - select white + gray
  #   - dilate white + gray by one voxel layer
  #   - add csf to the skeleton in the dilated layer of the mask
  #   - create the fixed skeleton to be used in the Laplacian
  #     field for the gray surface extraction.
  # NOTE: If you don't do this step, the skeleton will go through
  #       the gray matter if there is no layer of csf between gray
  #       and background. This will truncate the gray matter and
  #       make the cortex thinner.

  run( "minccalc", "-clobber", "-quiet", "-byte", "-expression",
       "if(A[0]>1.5){out=1;}else{out=0;}", $cls_correct, $wm_gm_mask );
  run( "dilate_volume", $wm_gm_mask, $wm_gm_maskD, "1", "26", "1" );
  unlink( $wm_gm_mask );
  run( "minccalc", "-clobber", "-quiet", "-byte", "-expression", 
       "if((A[1]<1.5&&A[2]>0.5)||A[0]>1.0e-06){out=1;}else{out=0;}",
       $pve_csf, $cls_correct, $wm_gm_maskD, $pve_csf_dil );
  unlink( $wm_gm_maskD );
  run( "skel", $pve_csf_dil, $skel_csf );
  unlink( $pve_csf_dil );
}



# fix_wm is a little bit of image processing alchemy that attempts 
# the following:
#   1) adds the wm skeleton to the wm image by removing any loose ends 
#      by blurring and cropping 
#   2) blurs and crops the whole image, and its negative iteratively, 
#      to remove "nonsense" voxels
# Problems or comments should be sent to: claude\@bic.mni.mcgill.ca
#
# fix_wm( classified.mnc, pve_wm, custom_mask.mnc, output.mnc )
#

sub fix_wm {

  my $classified =  shift;
  my $pve_wm =  shift;
  my $custom_mask = shift;
  my $brain_mask = shift;
  my $output = shift;


  my $iso = `mincinfo -attvalue xspace:step $classified`; chomp($iso);
  $iso = abs($iso);

  # plug holes around ventricles/hippocampus/amygdala where there is 
  # a small gap between the tissue type and wm.

  my $wm_dil = "${tmpdir}/wm_dil.mnc";
  my $ndil = ceil( 1.0 / $iso );  # dilate 1mm
  &run( 'minccalc', '-quiet', '-clobber', '-expression', 'if(abs(A[0]-4)<0.5){3}else{A[0]}',
        $classified, $wm_dil );
  &run( 'dilate_volume', $wm_dil, $wm_dil, 3, 6, $ndil );
  &run( 'dilate_volume', $custom_mask, $custom_mask, 3, 6, $ndil, $wm_dil, 2.5, 3.5 ); #ventricle 3
  &run( 'dilate_volume', $custom_mask, $custom_mask, 4, 6, $ndil, $wm_dil, 2.5, 3.5 ); #hippocampus 4
  &run( 'dilate_volume', $custom_mask, $custom_mask, 5, 6, $ndil, $wm_dil, 2.5, 3.5 ); #amygdala 5
  unlink( $wm_dil );

  # Disable internal compression on temporary files for fix_wm and fix_gm 
  # (much faster)

  my $MINC_COMPRESS = $ENV{'MINC_COMPRESS'};
  $ENV{'MINC_COMPRESS'} = 0;

  #   custom_mask=1: sub-cortical gray becomes 1 if cls=GM
  #   custom_mask=2: cerebellum becomes 0
  #   custom_mask=3: ventricles become 1 if cls=CSF (the latter
  #                  should be if pve_csf>threshold_csf
  #   custom_mask=4: hippocampus becomes 1
  #   custom_mask=5: amygdala becomes 1

  # Obtain a mask of voxels containing white matter. At this point,
  # exclude ventricles, brain-stem, hippocampus and amygdala. We don't 
  # want any of the white skeleton inside those regions. Also, apply 
  # on an eroded brain mask to avoid mixed pve effects for WM on the 
  # edge of the brain mask where meninges can be.

  my $nerode = ceil( 3.0 / $iso );  # erode 3mm
  my $brain_mask_eroded = "${tmpdir}/brain_mask_eroded.mnc";
  run( 'dilate_volume', $brain_mask, $brain_mask_eroded, 0, 6, $nerode );

  my $pve_wm_thresh = 0.001;
  my $pve_wm_temp = "${tmpdir}/pve_plugged.mnc";
  my $pve_wm_skel = "${tmpdir}/temp_skel.mnc";
  my $expr = "if(A[1]>0.5){if(abs(A[0]-2)<0.45||abs(A[0]-3)<0.45||abs(A[0]-4)<0.45||abs(A[0]-5)<0.45){0}else{if((A[2]>0.5&&A[3]>$pve_wm_thresh)||(A[3]>0.50)){1}else{0}}}else{0}";
  run( "minccalc", "-quiet", "-unsigned", "-byte", "-clobber", "-expr", 
       $expr, $custom_mask, $brain_mask, $brain_mask_eroded, $pve_wm, $pve_wm_temp );
  run( "skel", $pve_wm_temp, $pve_wm_skel );
  unlink( $pve_wm_temp );
  unlink( $brain_mask_eroded );

  # Clean up the wm skeleton. 
  my $fwhm = 2.0;

  # The original value of the threshold used by Oliver was 0.15.
  # JDL suggests to use a higher value like 0.30 at 0.5mm voxel size.
  # A smaller value includes more of the blurred skeleton, so fills-in
  # more gaps in the skeleton. A larger value (1.0) does not add 
  # anything to the original skeleton, thus no filling. Intuitively,
  # use a smaller value for old subjects with atrophy to reconstruct
  # more of the missing WM.

  my $thresh = 0.25 * $iso;   # a compromise between 0.3 and 0.15.
  my $iteration = 0;
  while( $iteration < 3 ) {
    my $temp_blur = "${tmpdir}/temp_blur.mnc";
    run( "mincblur", "-clobber", "-quiet", "-fwhm", $fwhm, $pve_wm_skel, $temp_blur );
    $temp_blur = "${temp_blur}_blur.mnc";
    run( "minccalc", "-clobber", "-quiet", "-expr", "out=(A[0]>$thresh)", 
         $temp_blur, $pve_wm_temp );
    unlink( $temp_blur );
    run( "skel", $pve_wm_temp, $pve_wm_skel );
    unlink( $pve_wm_temp );
    $iteration++;
  }
 
  # how this expression works:
  #   custom_mask=1: sub-cortical gray becomes wm=3 if cls=GM
  #   custom_mask=2: cerebellum/brainstem becomes csf=1
  #   custom_mask=3: ventricles become wm=3 (validated in plug_ventricles)
  #   custom_mask=4: hippocampus becomes wm=3
  #   custom_mask=5: amygdala becomes wm=3
  #   pve_wm_skel: white matter skeleton becomes wm=3
  #   classified=4: SC=4 becomes wm=3

  my $output_tmp = "${tmpdir}/output_tmp.mnc";
  $expr = "if(abs(A[1]-2)<0.45){out=1}else{if(A[1]>0.5||A[2]>0.5){out=3}else{if(abs(A[0]-4)<0.5){3}else{out=A[0]}}}";
  run( "minccalc", "-clobber", "-quiet", "-expr", $expr,
       $classified, $custom_mask, $pve_wm_skel, $output_tmp );
  run( "mincreshape", "-clobber", "-quiet", "-valid_range", 0, 3, 
       "-image_range", 0, 3, $output_tmp, "${tmpdir}/output_tmp_reshaped.mnc" );
  run( "mv", "-f", "${tmpdir}/output_tmp_reshaped.mnc", $output_tmp );

  unlink( $pve_wm_skel );

  # add a defrag on gray inside dilated custom_mask only.

  my $custom_mask_dil = "${tmpdir}/custom_mask_dil.mnc";
  &run( 'minccalc', '-quiet', '-clobber', '-expression', 
        'if(A[0]>0.5&&abs(A[0]-2)>0.5){1}else{0}', $custom_mask,
        $custom_mask_dil );
  &run( 'dilate_volume', $custom_mask_dil, $custom_mask_dil, 1, 6, $ndil );

  # enable internal compression on output files

  $ENV{'MINC_COMPRESS'} = $MINC_COMPRESS if( defined $MINC_COMPRESS );

  my $ndefrag = ceil( 20 / ($iso * $iso * $iso ) ); # number of voxels in mm^3.
  my $output_defrag = "${tmpdir}/output_defrag.mnc";
  &run( 'mincdefrag', $output_tmp, $output_defrag, 2, 6, $ndefrag );
  &run( 'minccalc', '-quiet', '-clobber', '-expression',
        'if(A[0]>0.5&&abs(A[1]-2)<0.5&&abs(A[2]-2)>0.5){3}else{A[1]}',
        $custom_mask_dil, $output_tmp, $output_defrag, $output );
  unlink( $custom_mask_dil );
  unlink( $output_tmp );
  unlink( $output_defrag );
}


# fix_gm is a little bit of image processing alchemy that attempts 
# the following:
#   1) blurs and crops the whole image, and its negative iteratively, 
#      to remove "nonsense" GM voxels
# Problems or comments should be sent to: claude\@bic.mni.mcgill.ca
#
# fix_gm( classified.mnc, output.mnc )
#

sub fix_gm {

  my $classified = shift;
  my $result = shift;

  my $temp_white = "${tmpdir}/temp_white.mnc";
  my $temp_white_blur_prefix = "${tmpdir}/temp_white";
  my $temp_white_blur = "${temp_white_blur_prefix}_blur.mnc";

  my $temp_gray = "${tmpdir}/temp_gray.mnc";
  my $temp_gray_blur_prefix = "${tmpdir}/temp_gray";
  my $temp_gray_blur = "${temp_gray_blur_prefix}_blur.mnc";
  my $temp_gray_new = "${tmpdir}/temp_gray_new.mnc";
  
  # Disable internal compression on temporary files for fix_wm and fix_gm 
  # (much faster)

  my $MINC_COMPRESS = $ENV{'MINC_COMPRESS'};
  $ENV{'MINC_COMPRESS'} = 0;

  run( "minccalc", "-clobber", "-quiet", "-expr", 'out=abs(A[0]-3)<0.45||abs(A[0]-4)<0.45;', 
       $classified, $temp_white );
  run( "mincblur", "-clobber", "-quiet", "-fwhm", "2", $temp_white, 
       $temp_white_blur_prefix );
  unlink( $temp_white );

  run( "minccalc", "-clobber", "-quiet", "-expr", 'out=abs(A[0]-2)<0.45;', 
       $classified, $temp_gray );

  ###first defrag the gray 
  run( "mincdefrag", $temp_gray, $temp_gray, "1", "27", "100000" );

  ###then go through iterations of blur and remove.
  # Simply do 5 fixed iterations, no checking for convergence (faster).
  my $count =0;
  while ($count<5){
    run( "mincblur", "-clobber", "-quiet", "-fwhm", "2", $temp_gray, 
         $temp_gray_blur_prefix );
 
    # pure gray will be kept and gray-white will be kept, but small
    # bits of gray surrounded by CSF (no white around) will be eroded.
    run( "minccalc", "-clobber", "-quiet", "-expr", 
         'out=(A[0]>0.45||A[0]>0.001&&A[2]>0.01)&&abs(A[1]-1)<0.45;', 
         $temp_gray_blur, $temp_gray, $temp_white_blur, $temp_gray_new);
    unlink( $temp_gray_blur );
 
    $count++;
    run( "mincdefrag", $temp_gray_new, $temp_gray, "1", "27", "100000" );
    unlink( $temp_gray_new );
  }

  # enable internal compression on output files

  $ENV{'MINC_COMPRESS'} = $MINC_COMPRESS if( defined $MINC_COMPRESS );
   
  # A removed gray voxel will be restored if it's in clear contact with WM;
  # A removed gray voxel will be set to CSF if it's not in clear contact with WM;
  # For other cases, keep the original classification.
  run( "minccalc", "-clobber", "-quiet", "-expr", 
       'if(A[0]<0.5&&abs(A[1]-2)<0.5&&A[2]>0.25){out=2}else{if(A[0]<0.5&&abs(A[1]-2)<0.5&&A[2]<0.25){out=1}else{out=A[1];}}', 
       $temp_gray, $classified, $temp_white_blur, $result );

  unlink( $temp_white_blur );
  unlink( $temp_gray );
}


# create_midline_mask extracts ...
# 
# Problems or comments should be sent to: claude\@bic.mni.mcgill.ca
# 
# create_midline_mask classified.mnc output.mnc\n".

sub create_midline_mask {

  my $classify = shift;
  my $custom_mask = shift;
  my $brain_mask = shift;
  my $output = shift;

  # Extract the brain mask of the mid plane x=0. This will remove white 
  # voxels for skull, but should not in any way interfere with the 
  # surroundings of the corpus callosum on the mid plane.

  my $mid_mask = "${tmpdir}/mid_mask.mnc";
  run( "mincresample", "-clobber", "-quiet", "-xstart", 0, "-xnelements", 1,
       $brain_mask, $mid_mask );

  # The creation of the midline mask below will work with
  # any template (0.5mm, 1.0mm, for example), assuming that
  # the centerline voxel is at x=0.

  my $mid_tmp = "${tmpdir}/mid_tmp.mnc";
  my $custom_tmp = "${tmpdir}/custom_tmp.mnc";
  my $callosum_with_bits  = "${tmpdir}/callosum_with_bits.mnc";
  run( "mincresample", "-clobber", "-quiet", "-xstart", 0, "-xnelements", 1,
       $classify, $mid_tmp );
  run( "mincresample", "-clobber", "-quiet", "-xstart", 0, "-xnelements", 1,
       $custom_mask, $custom_tmp );

  run( "minccalc", "-clobber", "-quiet", "-expr", "out=((A[2]>0.5)&&(abs(A[0]-3)<0.45||abs(A[0]-4)<0.45)||(((abs(A[1]-1)<0.5)||(abs(A[1]-3)<0.5))&&(A[0]>1.5)))",
       $mid_tmp, $custom_tmp, $mid_mask, $callosum_with_bits );
  unlink( $mid_mask );
  unlink( $mid_tmp );
  unlink( $custom_tmp );

  # Remove small islands of mask.
  run( "mincdefrag", $callosum_with_bits, $callosum_with_bits, 1, 6, 1000 );
  run( "mincdefrag", $callosum_with_bits, $callosum_with_bits, 0, 6 );

  # Retain the largest blob, which should be for the corpus callosum.
  open GROUP, "> ${tmpdir}/group.kernel";
  print GROUP "MNI Morphology Kernel File\n";
  print GROUP "Kernel_Type = Normal_Kernel;\n";
  print GROUP "Kernel =\n";
  print GROUP "0.0  1.0  0.0  0.0  0.0  1.0\n";   # kernel is 2-D in (y,z)
  print GROUP "0.0 -1.0  0.0  0.0  0.0  1.0\n";
  print GROUP "0.0  0.0  1.0  0.0  0.0  1.0\n";
  print GROUP "0.0  0.0 -1.0  0.0  0.0  1.0;\n";
  close GROUP;
  my $mid_groups = "${tmpdir}/mid_groups.mnc";
  run( 'mincmorph', '-clobber', '-unsigned', '-short', '-kernel', 
       "${tmpdir}/group.kernel", '-group', $callosum_with_bits, $mid_groups );
  run( 'minccalc', '-quiet', '-clobber', '-expression', 
       "if(abs(A[0]-1)<0.5){1}else{0}", $mid_groups, $callosum_with_bits );
  unlink( "${tmpdir}/group.kernel" );
  unlink( $mid_groups );

  # Fill-in the gaps.
  run( "dilate_volume", $callosum_with_bits, $callosum_with_bits, 1, 6 );
  run( "dilate_volume", $callosum_with_bits, $callosum_with_bits, 0, 6 );

  # back to 3-D
  my $callosal_defrag = "${tmpdir}/callosum_defrag.mnc";
  &run( "mincresample", "-clobber", "-quiet", '-unsigned', '-byte', "-like", 
        $classify, $callosum_with_bits, $callosal_defrag );
  unlink( $callosum_with_bits );

  open DILX, "> ${tmpdir}/kernel.dilx";
  print DILX "MNI Morphology Kernel File\n";
  print DILX "Kernel_Type = Normal_Kernel;\n";
  print DILX "Kernel =\n";
  print DILX "-2.0  0.0  0.0  0.0  0.0  3.0\n";
  print DILX "-1.0  0.0  0.0  0.0  0.0  2.0\n";
  print DILX "1.0  0.0  0.0  0.0  0.0  2.0\n";
  print DILX "2.0  0.0  0.0  0.0  0.0  3.0;\n";
  close DILX;
  &run( 'mincmorph', '-clobber', '-unsigned', '-byte', '-successive', 'D',
        '-kernel', "${tmpdir}/kernel.dilx", $callosal_defrag, $output );

  # make sure that there are no CSF voxel on the midline in direct
  # contact with WM for the purpose of the Laplacian field.

  my $callosal_dilated = "${tmpdir}/callosum_dilated.mnc";
  my $output_tmp = "${tmpdir}/output_tmp.mnc";
  &run( "dilate_volume", $callosal_defrag, $callosal_dilated, 1, 26, 1 );

  &run( 'minccalc', '-clobber', '-quiet', '-unsigned', '-byte', '-expression',
        "if(A[0]<0.5&&A[1]>0.5&&abs(A[2]-3)<0.5){2}else{A[2]}",
        $callosal_defrag, $callosal_dilated, $output, $output_tmp );
  &run( 'mv', '-f', $output_tmp, $output );

  unlink( $callosal_defrag );
  unlink( $callosal_dilated );

}  

# fix custom mask to get all of the ventricles if non-linear transform
# is incomplete. Note: this will overwrite custom_mask.

sub plug_ventricles {

  my $pve_csf = shift;
  my $custom_mask = shift;

  my $custom_mask_new = "${tmpdir}/custom_mask_new.mnc";

  my $iso = `mincinfo -attvalue xspace:step $custom_mask`; chomp($iso);
  $iso = abs($iso);

  # custom_mask = 1 (subcortical gray), = 2 (cerebellum),
  #             = 3 (ventricles surrounded by sc gray),
  #             = 4 (hippocampus), = 5 (amygdala),
  #             = 6 (ventricles not surrounded by sc gray).
  #             = 7 (permissible region for growth of ventricles of region 6).
  # 

  # this is real csf intersected with the csf from the custom mask.

  my $csf_vent = "${tmpdir}/csf_vent.mnc";
  &run( 'minccalc', '-clob', '-quiet', '-byte', '-unsigned', '-expr',
        'if((abs(A[0]-3)<0.5||abs(A[0]-6)<0.5)&&A[1]>0.10){1}else{0}',
        $custom_mask, $pve_csf, $csf_vent );
  &run( 'mincdefrag', $csf_vent, $csf_vent, 1, 27 );

  # dilate through classified csf that's connected to the mask of the ventricles.

  my $ndil = ceil( 10.0 / $iso );  # dilate 10mm
  &run( 'dilate_volume', $csf_vent, $csf_vent, 1, 6, $ndil, $pve_csf, 0.1, 1.1 );

  # dilate ventricular csf by only one layer to account for partial volume effects.

  &run( 'dilate_volume', $csf_vent, $csf_vent, 1, 6, 1 );

  # anything that is not connected csf in sc gray (1) will become sc gray (1). 
  # anything that is not connected csf in region 7 will become (0).
  # all other labels keep the same value 

  &run( 'minccalc', '-quiet', '-clobber', '-unsigned', '-byte', '-expression',
        'if(abs(A[0]-3)<0.5){if(A[1]>0.5){3}else{1}}else{if(abs(A[0]-6)<0.5){if(A[1]>0.5){3}else{0}}else{if(abs(A[0]-7)<0.5){if(A[1]>0.5){3}else{0}}else{A[0]}}}',
        $custom_mask, $csf_vent, $custom_mask_new );

  unlink( $csf_vent );
  run( 'mv', '-f', $custom_mask_new, $custom_mask );
}


# fix custom mask to get all of the ventricles if non-linear transform
# is incomplete. Note: this will overwrite custom_mask.

sub plug_ventricles_old {

  my $cls = shift;
  my $custom_mask = shift;

  my $custom_mask_new = "${tmpdir}/custom_mask_new.mnc";

  # custom_mask = 1 (subcortical gray), = 2 (cerebellum), = 3 (ventricles).
  #             = 4 (hippocampus), = 5 (amygdala)
  # anything that is subcortical gray in the custom_mask will be turned
  # to ventricles (3) if it is CSF in the classified image. anything that
  # is ventricles in the custom_mask will be turned to subcortical gray
  # in the custom mask it if is GM in the classified image.

  run( 'minccalc', '-clob', '-quiet', '-byte', '-unsigned', '-expr', 
       'if(abs(A[0]-1)<0.5&&(abs(A[1]-1)<0.5)){3}else{if(abs(A[0]-3)<0.5&&(abs(A[1]-2)<0.5)){1}else{A[0]}}',
       $custom_mask, $cls, $custom_mask_new );
  run( 'mv', '-f', $custom_mask_new, $custom_mask );

  my $cls_plugged = "${tmpdir}/cls_plugged.mnc";
  run( "minccalc", "-byte", "-unsigned", "-clobber", "-quiet", "-expr",
       "if(abs(A[1]-1)<0.5||abs(A[1]-3)<0.5||abs(A[0]-3)<0.5){out=3}else{A[0]}",
       $cls, $custom_mask, $cls_plugged );

  my $csf_mask = "${tmpdir}/csf_mask.mnc";
  run( 'minccalc', '-quiet', '-clobber', '-expr',
       'if((A[1]>0.5&&A[0]<0.5)||abs(A[0]-1)<0.5){1}else{0}',
       $cls_plugged, $cls, $csf_mask );
  run( 'mincdefrag', $csf_mask, $csf_mask, 1, 27, 5 );

  my $csf_groups = "${tmpdir}/csf_groups.mnc";
  run( 'mincmorph', '-clobber', '-unsigned', '-short', '-3D26', '-group',
       $csf_mask, $csf_groups );
  unlink( $csf_mask );

  # dilate through classified csf that's connected to the mask of the ventricles.
  my $custom_mask_dil = "${tmpdir}/custom_mask_dil.mnc";
  run( 'dilate_volume', $custom_mask, $custom_mask_dil, 3, 6, 20, $cls, 0.5, 1.5 );

  # find the groups that are connected to the csf of the dilated ventricles mask.
  my $final_groups = "${tmpdir}/final_groups.mnc";
  run( 'minccalc', '-clobber', '-quiet', '-expr',
       'if(A[0]>1.5&&abs(A[1]-3)<0.5){A[0]}else{0}',
       $csf_groups, $custom_mask_dil, $final_groups );

  my @fg = `print_all_labels $final_groups`;
  my @cg = `print_all_labels $csf_groups`;
  unlink( $custom_mask_dil );
  unlink( $final_groups );

  open LUT, "> ${tmpdir}/table.lut";
  for( my $g1 = 0; $g1 <= $#cg; $g1++ ) {
    $cg[$g1] =~ /Label: ([0-9]+) ([0-9]+)/;
    my $label = $1;
    my $count = $2;
 
    my $new_label = 0;
    for( my $g2 = 0; $g2 <= $#fg; $g2++ ) {
      $fg[$g2] =~ /Label: ([0-9]+) ([0-9]+)/;
      if( $1 == $label ) {
        $new_label = 1;
        last;
      }
    }
    print LUT "$label $new_label\n";
  }
  close( LUT );

  my $csf_extra = "${tmpdir}/csf_extra.mnc";
  &run( 'minclookup', '-clob', '-quiet', '-discrete', '-lookup_table',
        "${tmpdir}/table.lut", $csf_groups, $csf_extra );
  unlink( $csf_groups );
  unlink( "${tmpdir}/table.lut" );

  # expand one layer to try to account for partial volume effects.
  run( 'dilate_volume', $csf_extra, $csf_extra, 1, 6, 1 );

  # final correction to the custom mask.
  run( 'minccalc', '-quiet', '-clobber', '-expr',
       'if(A[1]>0.5){3}else{A[0]}', $custom_mask, $csf_extra,
       $custom_mask_new );
  run( 'mv', '-f', $custom_mask_new, $custom_mask );
}

# Identify blood vessels in the classified image.

sub remove_blood_vessels {

  my $t1 = shift;
  my $mask = shift;
  my $pve_cls = shift;
  my $pve_disc = shift;
  my $output = shift;

  # Find intensity thresholds for WM.

  my $base = &basename( $pve_cls );
  $base =~ s/\.mnc//g;
  my $cls_masked = "${tmpdir}/$base\_masked.mnc";
  &run( 'minccalc', '-quiet', '-clobber', '-unsigned', '-byte', '-expression',
        "if(A[1]>0.5){A[0]}else{0}", $pve_cls, $mask, $cls_masked );

  my $WMmean = `mincstats -quiet -majority -mask $cls_masked -mask_binvalue 3 $t1`;
  chomp( $WMmean );

  my $WMsdev = `mincstats -quiet -stddev -mask $cls_masked -mask_binvalue 3 $t1`;
  chomp( $WMsdev );

  my $WMthresh = $WMmean + 2 * $WMsdev;

  print "WM-mean = $WMmean\n";
  print "WM-stddev = $WMsdev\n";
  print "WM-thresh = $WMthresh\n";

  # Find a mask for pure WM in the cerebrum for which there cannot be
  # any blood vessels (t1 > WMthresh). This sometimes fails on the mid-
  # sagittal plane where the major blood vessel is very close to the
  # corpus-callosum and classified as pure WM.

  my $cerebral_wm = "${tmpdir}/cerebral_wm.mnc";
  my $wmgroups = "${tmpdir}/wmgroups.mnc";
  &run( 'minccalc', '-clobber', '-quiet', '-unsigned', '-byte', '-expression',
        "if((abs(A[0]-3)<0.5)&&(abs(A[1]-1)<0.5)&&(A[2]<$WMthresh)){1}else{0}",
        $pve_disc, $mask, $t1, $cerebral_wm );
  &run( 'mincdefrag', $cerebral_wm, $cerebral_wm, 1, 6, 1000 );
  &run( 'mincmorph', '-clobber', '-unsigned', '-byte', '-group', '-3D06',
        $cerebral_wm, $wmgroups );
  &run( 'minccalc', '-clobber', '-quiet', '-unsigned', '-byte',
        '-expression', "if(abs(A[0]-1)<0.5){1}else{0}", $wmgroups, $cerebral_wm );
  unlink( $wmgroups );
  &run( 'dilate_volume', $cerebral_wm, $cerebral_wm, 0, 6, 1 );
  &run( 'mincdefrag', $cerebral_wm, $cerebral_wm, 1, 6 );
  &run( 'dilate_volume', $cerebral_wm, $cerebral_wm, 1, 6, 1 );
  &run( 'mincdefrag', $cerebral_wm, $cerebral_wm, 0, 6 );
  &run( 'dilate_volume', $cerebral_wm, $cerebral_wm, 1, 6, 1 );

  # Find zones of high second derivatives (this is approximate).

  my $Htrace = "${tmpdir}/hessian_trace.mnc";
  &hessian_trace( $t1, $Htrace );

  my $tmp_wm = "${tmpdir}/tmp_wm.mnc";
  &run( 'minccalc', '-clobber', '-quiet', '-unsigned', '-byte', '-expression',
        "if(A[2]>0.5&&A[1]<0.5&&A[0]>$WMthresh){1}else{0}",
        $t1, $cerebral_wm, $mask, $tmp_wm );
  my $d2thresh = `mincstats -quiet -pctT 10.0 $Htrace -mask $tmp_wm -mask_binvalue 1`;
  chomp( $d2thresh );
  print "D2-thresh = $d2thresh\n";
  unlink( $tmp_wm );

  # initial guess at the blood vessels based on:
  #   t1 > wm-threshold (high intensities)
  #   tr(|H|) > d2-threshold (high second derivatives for line features)

  my $tmp_blood = "${tmpdir}/tmp_blood.mnc";
  &run( 'minccalc', '-clobber', '-quiet', '-unsigned', '-byte', '-expression',
        "if(A[2]>0.5&&A[1]<0.5&&A[0]>$d2thresh&&A[3]>$WMthresh){1}else{0}",
        $Htrace, $cerebral_wm, $mask, $t1, $tmp_blood );
  unlink( $Htrace );
  unlink( $cerebral_wm );
  &run( 'mincdefrag', $tmp_blood, $tmp_blood, 0, 6 );
  &run( 'mincdefrag', $tmp_blood, $tmp_blood, 1, 6, 10 );
  &run( 'dilate_volume', $tmp_blood, $tmp_blood, 1, 6, 1 );

  # remove large chunks of the blood vessels from classified image.

  my $new_cls = "${tmpdir}/new_cls.mnc";
  &run( 'minccalc', '-quiet', '-clobber', '-unsigned', '-byte', '-expression',
        'if(abs(A[0]-3)<0.5&&A[1]>0.5){1}else{A[0]}',
        $cls_masked, $tmp_blood, $new_cls );
  unlink( $tmp_blood );

  # remove remaining small bits of the blood vessels from classified image.
  &run( 'mincdefrag', $new_cls, $new_cls, 3, 6 );

  # save the blood vessels

  &run( 'minccalc', '-quiet', '-clobber', '-unsigned', '-byte', '-expression',
        '(abs(A[0]-A[1])>0.5)', $cls_masked, $new_cls, $output );
  &run( 'mincdefrag', $output, $output, 1, 6, 10 );

  unlink( $new_cls );
  unlink( $cls_masked );
}

# Compute the trace of the Hessian matrix H (matrix of second derivatives).
# Note that the trace(H) is equal to the sum of the eigenvalues of H.

sub hessian_trace {

  my $t1 = shift;
  my $Htrace = shift;

  open DXX, "> ${tmpdir}/kernel.dxx";
  print DXX "MNI Morphology Kernel File\n";
  print DXX "Kernel_Type = Normal_Kernel;\n";
  print DXX "Kernel =\n";
  print DXX "-1.0  0.0  0.0  0.0  0.0  1.0\n";
  print DXX "1.0  0.0  0.0  0.0  0.0  1.0\n";
  print DXX "0.0  0.0  0.0  0.0  0.0 -2.0;\n";
  close DXX;
  &run( 'mincmorph', '-clobber', '-convolve', '-kernel', "${tmpdir}/kernel.dxx",
        $t1, "${tmpdir}/dxx.mnc" );
  unlink( "${tmpdir}/kernel.dxx" );

  open DYY, "> ${tmpdir}/kernel.dyy";
  print DYY "MNI Morphology Kernel File\n";
  print DYY "Kernel_Type = Normal_Kernel;\n";
  print DYY "Kernel =\n";
  print DYY "0.0 -1.0  0.0  0.0  0.0  1.0\n";
  print DYY "0.0  1.0  0.0  0.0  0.0  1.0\n";
  print DYY "0.0  0.0  0.0  0.0  0.0 -2.0;\n";
  close DYY;
  &run( 'mincmorph', '-clobber', '-convolve', '-kernel', "${tmpdir}/kernel.dyy",
        $t1, "${tmpdir}/dyy.mnc" );
  unlink( "${tmpdir}/kernel.dyy" );

  open DZZ, "> ${tmpdir}/kernel.dzz";
  print DZZ "MNI Morphology Kernel File\n";
  print DZZ "Kernel_Type = Normal_Kernel;\n";
  print DZZ "Kernel =\n";
  print DZZ "0.0  0.0 -1.0  0.0  0.0  1.0\n";
  print DZZ "0.0  0.0  1.0  0.0  0.0  1.0\n";
  print DZZ "0.0  0.0  0.0  0.0  0.0 -2.0;\n";
  close DZZ;
  &run( 'mincmorph', '-clobber', '-convolve', '-kernel', "${tmpdir}/kernel.dzz",
        $t1, "${tmpdir}/dzz.mnc" );
  unlink( "${tmpdir}/kernel.dzz" );

  # Compute the trace of the Hessian matrix: dxx + dyy + dzz,
  # which is equal to the sum of the eigenvalues. However, here
  # we compute the sum of the absolute values of the diagonal
  # elements of the matrix.

  &run( 'minccalc', '-quiet', '-clobber', '-expression',
        "abs(A[0])+abs(A[1])+abs(A[2])", "${tmpdir}/dxx.mnc",
        "${tmpdir}/dyy.mnc", "${tmpdir}/dzz.mnc", $Htrace );

  unlink( "${tmpdir}/dxx.mnc" );
  unlink( "${tmpdir}/dyy.mnc" );
  unlink( "${tmpdir}/dzz.mnc" );
}

#Execute a system call.

sub run {
  print shellquote(@_), "\n";
  system(@_)==0 or die "Command @_ failed with status: $?";
}



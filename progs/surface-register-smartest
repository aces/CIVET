#! /usr/bin/env perl
#
# Configurable surface register 
#
# Oliver Lyttelton oliver@bic.mni.mcgill.ca
#
# Copyright Alan C. Evans
# Professor of Neurology
# McGill University
#

use strict;
use warnings "all";
use Getopt::Tabular;
use File::Basename;
use File::Temp qw/ tempdir /;

use FindBin;
use lib "$FindBin::Bin";

my $surf_resample = "$FindBin::Bin/surface-resample2";

my($Help, $Usage, $me);
my(@opt_table, %opt, $source, $target, $outxfm, @args, $tmpdir);

$me = &basename($0);
%opt = (
   'verbose'   => 0,
   'clobber'   => 0,
   );

$Help = <<HELP;
|    $me fully configurable surface fitting...
| 
| Problems or comments should be sent to: oliver\@bic.mni.mcgill.ca
HELP

$Usage = "Usage: $me [options] initial_sm source.obj source.txt target.obj target.txt output.sm\n".
         "       $me -help to list options\n\n";


my $verbose = 0;
my $clobber = 0;
my $source_blur = 0;
my $target_blur = 0;
my $mesh_smooth = 1;
my $neighbourhood_radius = 2.7;
my $search_radius = 0.5;
my $penalty_ratio = 0.05;
my $keep_blur = undef;
my $convergence_control = 0;
my $convergence_threshold = 20;

@opt_table = (
   ["-verbose", "const", "1", \$verbose,
      "be verbose" ],
   ["-clobber", "const", "1", \$clobber,
      "clobber existing files" ],
   ["-mesh_smooth", "string", 1, \$mesh_smooth,
      "neighbour weight in smoothing step (default 1)" ],      
   ["-penalty_ratio", "string", 1, \$penalty_ratio,
      "penalty ratio in smoothing step (default 0.05)" ],      
   ["-source_blur", "string",1,\$source_blur, 
      "optional source blurring kernel" ],
   ["-target_blur", "string",1,\$target_blur, 
      "optional target blurring kernel" ],
   ["-neighbourhood_radius", "string",1,\$neighbourhood_radius, 
      "neighbourhood radius" ], 
  ["-search_radius", "string",1,\$search_radius, 
      "search radius" ],  
   ["-keep_blur", "const","1",\$keep_blur, 
      "keep blurred files" ], 
    ["-no_keep_blur", "const","0",\$keep_blur, 
      "(default) don't keep blurred files" ], 
   ["-convergence_control", "string",1,\$convergence_control, 
      "0 static, 1 inter-field distance, 2 node movement" ],
   ["-convergence_threshold", "string",1,\$convergence_threshold, 
      "for static control = num iterations, for non-static convergence control % change (0.01 =1%)" ],
   );    

# Check arguments
&Getopt::Tabular::SetHelp($Help, $Usage);
&GetOptions (\@opt_table, \@ARGV) || exit 1;
die $Usage if($#ARGV != 5);
my $initial_sm = shift(@ARGV);
my $source_obj = shift(@ARGV);
my $source_field = shift(@ARGV);
my $target_obj = shift(@ARGV);
my $target_field= shift(@ARGV);
my $output_sm     = shift(@ARGV);


# check for files
die "$me: Couldn't find input file: $source_obj\n" if (!-e $source_obj);
die "$me: Couldn't find input file: $source_field\n" if (!-e $source_field);
die "$me: Couldn't find input file: $target_obj\n" if (!-e $target_obj);
die "$me: Couldn't find input file: $target_field\n" if (!-e $target_field);

if(-e $output_sm && !$opt{clobber}){
   die "$me: $output_sm exists, -clobber to overwrite\n";
   }

# make tmpdir
$tmpdir = &tempdir( "$me-XXXXXXXX", TMPDIR => 1, CLEANUP => 1 );
#$tmpdir = "./";
my $control_mesh = "${tmpdir}/control_mesh.obj";
my $target_mesh = "${tmpdir}/target_mesh.obj";
my $source_field_blur = "${tmpdir}/source_field_blur.txt";
my $target_field_blur = "${tmpdir}/target_field_blur.txt";
if ($keep_blur){
   $source_field_blur = "${source_field}_blur${source_blur}.txt";
   $target_field_blur = "${target_field}_blur${target_blur}.txt";
}
my $remapped_target = "${tmpdir}/target_on_source.txt";
my $current_sm ="${tmpdir}/current_sm.sm";

#Initial checks...
#Make sure all source and target obj and txt files have the right length
#If a surface mapping is specified make sure the target mesh has the right size....
 
&check_lengths($source_field,$target_field, $source_obj, $target_obj);
### print ($initial_sm);
open INOBJ,$initial_sm;

my @inobjarray = <INOBJ>;
my $control_mapping_mesh_size = $inobjarray[2]*2-4;
my $target_mapping_mesh_size = $inobjarray[3]*2-4;
close(INOBJ);

#Then we make the control mesh and the sphere mesh
&do_cmd('create_tetra',$control_mesh,0,0,0,1,1,1,$control_mapping_mesh_size);
# and the sphere mesh
&do_cmd('create_tetra',$target_mesh,0,0,0,1,1,1,$target_mapping_mesh_size);


#then we blur the source and target fields using diffusion smoothing
if (!$source_blur==0) { 
  if (!(-e  $source_field_blur) ) {
    &do_cmd("diffuse", "-kernel", $source_blur,"-parametric", 0, 
            "-iterations", 500, $source_obj, $source_field, $source_field_blur);
  }
} else {
  $source_field_blur=$source_field;
}

if (!$target_blur==0) { 
  if (!(-e  $target_field_blur) ) {
    &do_cmd("diffuse", "-kernel", $target_blur, "-parametric", 0, 
            "-iterations", 500, $target_obj, $target_field, $target_field_blur);
  }
} else{
  $target_field_blur= $target_field;
}

#then we register the and end up with a control->target sm file
my $doneflag = 0;
my $iteration=0;
my $oldsum = 10000000000000;
my $firstsum = 10000000000000;
my $sum = undef;
my $fielddif =0;
&do_cmd('cp',$initial_sm,$current_sm);

my $initial_distance = &get_inter_field_distance($initial_sm,$source_field_blur,$target_field_blur);

print "Fit Diagnostics,iteration: ${iteration}, Field Dif:${initial_distance} \n";

my @conv_hist = (1.0) x 3;

while(!$doneflag) {
  $iteration=$iteration+1;
  my $out_text  = &do_cmd('surftracc', '-debug', '2', '-outer_iter_max', 1,
                          "-smoothing_weight", $mesh_smooth,
                          "-penalty_ratio", $penalty_ratio,
                          "-neighbourhood_radius", $neighbourhood_radius,
                          "-search_radius", $search_radius, $target_mesh, 
                          $source_field_blur, $target_mesh, $target_field_blur,
                          $control_mesh, $current_sm, $output_sm, "2>&1");

  $out_text =~ /TOTAL.*mean\s=(.*)\(.*\n/;   ## give by -debug 2
  my $movement = ${1};
  my $rel_error = 0;
  my $rel_error2 = 0;

  if( $convergence_control==0 ) {
    # static number of iterations
    if($iteration>=$convergence_threshold) {
      $doneflag =1;
    }
    print "Fit Diagnostics,Iteration: ${iteration}, Movement:${movement}\n";
  } else {
    if ($convergence_control==1) {
      $fielddif = &get_inter_field_distance($output_sm,$source_field_blur,$target_field_blur);
      $sum =$fielddif;
    }
    if ($convergence_control==2) {
      $sum=$movement;
    }

    if( $iteration==1 ) {
      $firstsum = $sum;
    }

    $rel_error = ($oldsum-$sum)/$oldsum;
    $oldsum=$sum;
    $conv_hist[(${iteration}%3)] = $rel_error;
    my $avg_rel_err = ( $conv_hist[0] + $conv_hist[1] + $conv_hist[2] ) / 3.0;

    # Taking average over last 3 iterations will account for non monotonic convergence.
    if( $avg_rel_err < $convergence_threshold ) {
      #replace the new mapping with the old one... 
      $fielddif = &get_inter_field_distance($output_sm,$source_field_blur,$target_field_blur); 
      &do_cmd('cp',$current_sm,$output_sm);
      $doneflag=1;
    }

    print "Fit Diagnostics,Iteration: ${iteration}, ",
          ($convergence_control==1) ? " Field Dif:${fielddif}, " : "",
          "Movement:${movement}, ", "Error:${rel_error}, ",
          "Res:", ${sum}/${firstsum}, "\n";
  }
  if (!$doneflag) {
    &do_cmd('cp',$output_sm,$current_sm);
  }
}
if( $convergence_control != 1 ) {
  if( $convergence_control == 0 ) {
    $fielddif = &get_inter_field_distance($output_sm,$source_field_blur,$target_field_blur); 
  }
  print "Fit Diagnostics,iteration: ${iteration}, Field Dif:${fielddif} \n";
}


sub do_cmd { 
   print STDOUT "@_\n" if $opt{verbose};
   #system(@_) == 0 or die;
   my $temp = `@_`;
   print $temp if $opt{verbose};
   return $temp;
}


sub check_lengths {

  my ($source_field,$target_field, $source_obj, $target_obj)=@_;
  my $target_object_size;
  my $source_object_size;
  my $source_field_size;
  my $target_field_size; 
  my @vals;
  my @inobjarray;

  open INOBJ,$source_field;
  @inobjarray = <INOBJ>;
  $source_field_size = ($#inobjarray+1)*2-4;
  if ($inobjarray[0] eq "" || $inobjarray[0] eq "\n") {
    $source_field_size =   $source_field_size-2;
  }
  close(INOBJ);

  open INOBJ,$target_field;
  @inobjarray = <INOBJ>;
  $target_field_size = ($#inobjarray+1)*2-4;
  if ($inobjarray[0] eq ""|| $inobjarray[0] eq "\n") {
    $target_field_size = $target_field_size-2;
  }
  close(INOBJ);

  open INOBJ,$source_obj;
  @inobjarray = <INOBJ>;
  @vals = split/\s+/,$inobjarray[0];
  $source_object_size = $vals[6]*2-4;
  close(INOBJ);
  
  open INOBJ,$target_obj;
  @inobjarray = <INOBJ>;
  @vals = split/\s+/,$inobjarray[0];
  $target_object_size = $vals[6]*2-4;
  close(INOBJ);
  
  if (( $source_field_size!=$target_field_size)||
      ($source_object_size!=  $target_object_size)||
      ($target_field_size!= $source_object_size)){
    die "$me: files have different object lengths! source_field_size($source_field_size), source_object_size ($source_object_size), target_field_size($target_field_size), target_object_size($target_object_size) . Insert coin to play again";
  }
}


sub get_inter_field_distance {
  my $temp_remap = "${tmpdir}/tmp_remap.txt";
  # my $difference=  "${tmpdir}/dif_${iteration}.txt";
  my ($sm,$source_field_blur,$target_field_blur) =  @_;
  &do_cmd($surf_resample, '-clobber',$sm,$target_field_blur,$temp_remap);
        
  #okay so measure distance  
  open SOURCEFIELD,$source_field_blur; 
  open TARGETFIELD,$temp_remap;
  # open(OUT,">${difference}");
  my $sum=0;
  while(1) {
    my $sourceval = <SOURCEFIELD>;
    if (!$sourceval){
      last;
    }
    while (($sourceval eq "")||($sourceval eq "\n")) {
      $sourceval = <SOURCEFIELD> ;
    }
    my $targetval = <TARGETFIELD>;
    if (!$targetval){
      die("One of the source or target field files is corrupted");
    }
    while (($targetval eq "")||($targetval eq "\n")) {
      $targetval = <TARGETFIELD> ;
    }
    #print "$sourceval\t $targetval\n";
    # print OUT  abs($targetval-$sourceval);
    # print OUT "\n";
    $sum=$sum + abs($targetval-$sourceval);                    
  }
  my $targetval = <TARGETFIELD>;
  if ($targetval) {
    die("One of the source or target field files is corrupted");
  }
  close(SOURCEFIELD);
  close(TARGETFIELD); 
  # close(OUT); 
  return $sum;    
}

